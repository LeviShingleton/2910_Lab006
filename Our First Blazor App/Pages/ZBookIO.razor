@page "/zBookIO" 
<!-- Can use a dummy location such as /users/{username} to store Book objects for each borrowed book -->

@using BlazorConversion.Data
@using BlazorConversion.Services
@inject ILibrary Librarian

<div>
	<h3>Book Checkin/Checkout</h3>
	<table>
		<tr>
			<td>User ID:</td>
			<td><input type="text" @bind=userID /></td>
		</tr>
		<tr>
			<td>Book ID:</td>
			<td><input type="text" @bind=bookID /></td>
		</tr>
	</table>
	<br />

	<table>
		<tr>
			<td><button @onclick=BorrowBook>Check Out</button></td>
			<td></td>
			<td><button @onclick=ReturnBook>Check In</button></td>
		</tr>
	</table>
</div>
<br />
<div>
	<h3>Checked Out Books</h3>
	<table>
		<thead>
			<tr>
				<th>Book ID</th>
				<th>Title</th>
				<th>User ID</th>
				<th>Email</th>
			</tr>
		</thead>
		@foreach (KeyValuePair<User, List<Book>> kvp in Librarian.borrowedBooks)
		{
			@foreach (Book borrowed in kvp.Value)
			{
				<tr>
					<td>@borrowed.Id</td>
					<td>@borrowed.Title</td>
					<td>@kvp.Key.Id</td>
					<td>@kvp.Key.Email</td>
				</tr>
			}
		}
	</table>
</div>



@code {
	int bookID;
	int userID;

	/// <summary>
	/// Adds a Book to a User.borrowedBooks list and removes it from Librarian.Books
	/// TODO: Redesign checkout system to keep static record in Librarian.Books
	/// 11/14/2023
	/// </summary>
	/// <returns></returns>
	public async Task BorrowBook()
	{
		Book book = Librarian.Books.FirstOrDefault(b => b.Id == bookID);

		if (book != null && Librarian.Books.Count(b => b.Id == bookID) > 0)
		{
			User user = Librarian.Users.FirstOrDefault(u => u.Id == userID);

			if (user != null)
			{
				if (!Librarian.borrowedBooks.ContainsKey(user))
				{
					Librarian.borrowedBooks[user] = new List<Book>();
				}
				Librarian.borrowedBooks[user].Add(book);
				Librarian.Books.Remove(book);
				Console.WriteLine("Book borrowed successfully!\n");
			}
			else
			{
				Console.WriteLine("User not found!\n");
			}
		}
		else
		{
			Console.WriteLine("Book not found or no available copies!\n");
		}
	}

	/// <summary>
	/// Returns a borrowed Book from a User and readds it to the library.
	/// TODO: Redesign checkout system to keep static record in Librarian.Books
	/// 11/14/2023
	/// </summary>
	/// <returns></returns>
	public async Task ReturnBook()
	{
		User user = Librarian.Users.FirstOrDefault(u => u.Id == userID);

		if (user != null && Librarian.borrowedBooks.ContainsKey(user) && Librarian.borrowedBooks[user].Count > 0)
		{
			Book bookToReturn = Librarian.borrowedBooks[user].FirstOrDefault(b => b.Id == bookID);
			Librarian.borrowedBooks[user].RemoveAt(Librarian.borrowedBooks[user].IndexOf(bookToReturn));
			// TODO: CONVERT TO FLAG SYSTEM
			// Modification of Librarian.Books causes data loss when resuming operations from Books page.
			// Checking out a book and then adding a new book will result in an ID collision.
			Librarian.Books.Add(bookToReturn);
		}
		else
		{
			Console.WriteLine("User not found or no borrowed books!\n");
		}
	}
}
